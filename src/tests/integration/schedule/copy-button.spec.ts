import { expect, test } from '@playwright/test';

test.describe('Copy to clipboard feature', () => {
	test.beforeEach(async ({ context, browserName }) => {
		// Grant clipboard permissions for testing, but only for browsers that support it
		if (browserName !== 'webkit') {
			await context.grantPermissions(['clipboard-read', 'clipboard-write']);
		}
	});

	test('should copy output to clipboard when copy button is clicked', async ({
		page,
		browserName
	}) => {
		await page.goto('/');
		const outputTextarea = page.locator('section#output textarea');
		const copyButton = page.locator('button.copy-btn');

		// Wait for the app to be fully initialized. A good signal for this is when
		// the output textarea isn't blank. This is more robust than waiting
		// for a single element to be enabled and ensures the initial data is loaded.
		await expect(outputTextarea).not.toHaveValue('');

		// grab the content to ensure our next action actually changes it.
		const initialContent = await outputTextarea.inputValue();

		// Interact with the page to generate a different output.
		// The <input> is hidden for styling, so we click the visible text
		// inside the <label> to toggle the checkbox state, just like a user would.
		await page.getByText('Mon').click();
		await page.getByText('Tue').click();

		// Wait for the output to be regenerated by checking that the textarea value has changed.
		await expect(outputTextarea).not.toHaveValue(initialContent);
		await expect(copyButton).toBeEnabled();

		// Get the new content that should be copied.
		const textareaContent = await outputTextarea.inputValue();

		// Ensure there is actually new content to copy.
		expect(textareaContent).not.toBe(initialContent);

		// Click the copy button.
		await copyButton.click();

		// Verify the clipboard content matches the textarea content exactly.
		if (browserName !== 'webkit') {
			const clipboardText = await page.evaluate(() => navigator.clipboard.readText());
			expect(clipboardText).toBe(textareaContent);
		}
	});

	test('should display a "Copied!" toast message on successful copy', async ({ page }) => {
		await page.goto('/');
		const copyButton = page.locator('button.copy-btn');
		await expect(page.locator('section#output textarea')).not.toContainText('Loading data...');
		await copyButton.click();
		await page.waitForSelector('.toast-message');

		const toast = page.locator('.toast-message');
		await expect(toast).toBeVisible();
		await expect(toast).toHaveText('Copied!');
		await expect(toast).toBeHidden();
	});
});
